{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/footer/footer.component.html","webpack:///./src/app/header/header.component.html","webpack:///./src/app/login/login.component.html","webpack:///./src/app/registration/registration.component.html","webpack:///./src/app/userlist/userlist.component.html","webpack:///./src/app/_helpers/must-match.validator.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard.service.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/footer/footer.component.css","webpack:///./src/app/footer/footer.component.ts","webpack:///./src/app/header/header.component.css","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/login.service.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/registration.service.ts","webpack:///./src/app/registration/registration.component.css","webpack:///./src/app/registration/registration.component.ts","webpack:///./src/app/userlist/userlist.component.css","webpack:///./src/app/userlist/userlist.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<app-header></app-header> \\n<router-outlet></router-outlet>\\n<app-footer></app-footer>\\n\\n\\n\"","module.exports = \"\\n<!-- main app container -->\\n<div class=\\\"jumbotron\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <h3>User Dashboard</h3>\\n\\t\\t\\t\\t<div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\t\\t       <div *ngIf=\\\"success\\\" class=\\\"alert alert-success\\\">{{success}}</div>\\n               \\n            </div>\\n\\t\\t\\t <table class=\\\"table table-striped\\\">\\n    <thead>\\n        <tr>\\n          \\n          <th>First Name</th>\\n          <th>Last Name</th>\\n          <th>Email</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let user of users.data\\\">\\n        <td>{{ user.firstName }}</td>\\n        <td>{{ user.lastName }}</td>\\n        <td>{{ user.email }}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- credits -->\\n<div class=\\\"text-center\\\">\\n  MIS Patrika group\\n</div>\\n\"","module.exports = \"<h5 class=\\\"text-center\\\">All right reserved @2019</h5>             \\n\"","module.exports = \"<h3 class=\\\"text-center\\\">\\n  Welcome to {{ title }}!\\n  <h3>\\n <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNavDropdown\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n\\t<li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"/\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n     </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"dashboard\\\">Dashboard</a>\\n      </li>\\n     <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"list\\\">User list</a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"login\\\">Login</a>\\n    </li>\\n\\t<li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"registration\\\">Registration</a>\\n    </li>\\n    </ul>\\n  </div>\\n</nav>\\n\\n\\n\"","module.exports = \"\\n<!-- main app container -->\\n<div class=\\\"jumbotron\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <h3>Login Form</h3>\\n\\t\\t\\t\\t<div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\t\\t       <div *ngIf=\\\"success\\\" class=\\\"alert alert-success\\\">{{success}}</div>\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                  \\n                    <div class=\\\"form-group\\\">\\n                        <label>Email</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                            <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label>Password</label>\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n                        </div>\\n                    </div>\\n                     <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n            Login\\n        </button>\\n        <a routerLink=\\\"/registration\\\" class=\\\"btn btn-link\\\">Register</a>\\n    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- credits -->\\n<div class=\\\"text-center\\\">\\n  MIS Patrika group\\n</div>\\n\"","module.exports = \"<!-- main app container -->\\n<div class=\\\"jumbotron\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n\\t\\t<div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <h3>Angular 7 Reactive Form Validation</h3>\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label>First Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label>Last Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label>Email</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                            <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label>Password</label>\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label>Confirm Password</label>\\n                        <input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPassword.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.confirmPassword.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.confirmPassword.errors.required\\\">Confirm Password is required</div>\\n                            <div *ngIf=\\\"f.confirmPassword.errors.mustMatch\\\">Passwords must match</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <button class=\\\"btn btn-primary\\\">Register</button>\\n\\t\\t\\t\\t\\t\\t <a routerLink=\\\"/login\\\" class=\\\"btn btn-link\\\">Login</a>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- credits -->\\n<!-- credits -->\\n<div class=\\\"text-center\\\">\\n  MIS Patrika group\\n</div>\"","module.exports = \"<p>\\n  userlist works!\\n</p>\\n\"","import { FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { LoginComponent } from './login/login.component';\nimport { UserlistComponent } from './userlist/userlist.component';\n\nconst routes: Routes = [\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'registration', component: RegistrationComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'list', component: UserlistComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\ndeclare const myTest: any;\nimport * as $ from \"jquery\";\n\t\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent \n{\n  title = 'user-module';\n  /* ngOnInit()\n   {\n\t  alert('clicked on click123');\n   }\n  onClick() \n  {\n\t $(function()\n\t {\n       alert('clicked by jquwyewr');\n\t }); \n\t  //console.log(\"clciked\");\n      myTest();\n  }*/\n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { UserlistComponent } from './userlist/userlist.component';\n\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    RegistrationComponent,\n    LoginComponent,\n    DashboardComponent,\n    UserlistComponent\n  ],\n  imports: [\n    BrowserModule,\n\tFormsModule,\n\tHttpClientModule,\n\tAppRoutingModule,\n\tReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from  'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n    constructor(private httpClient: HttpClient) {}\n   API_SERVER = \"http://10.30.8.231:3000/\";\n  userlist() \n  {\n    return this.httpClient.get(`${this.API_SERVER}userlist`);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DashboardService } from '../dashboard.service';\n\nimport { Dashboard } from  '../dashboard';\n\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\t  error: string;\n    success: string;\n\t //users: User[];\n\t \n\t \tusers: Dashboard[];\n  constructor( private dashboardService: DashboardService, private router: Router, private route: ActivatedRoute ) { \n    this.users = [];\n  \n  }\n\n  ngOnInit() \n  {\n\t    // show success message on registration\n        if (this.route.snapshot.queryParams['logged']=='true') \n\t\t{\n\t\t// private products  = []; \n            this.success = 'successfully logged getting user list';\n\t\t\t  this.dashboardService.userlist().subscribe((users: Dashboard[])=>{\n      this.users = users;\n     // console.log(this.policies);\n    });\n\t\t\t\n\t\t\t /*this.dashboardService.userlist()\n            .pipe(first())\n            .subscribe(\n                data => {\n\t\t\t\t\t//this.loading = false;\n\t\t\t\t\tconsole.log(\"data dashboard===\",data);\n\t\t\t\t\tthis.users =data ;\n                },\n                error => {\n\t\t\t\t\t\t  console.log(\"error===\",error);\n\t\t\t\t\t\t  this.error = 'Something missing wrong. Please try again';\n\t\t\t\t\t\t \n                });*/\n\t\t\t\t\n        } else \n\t\t{\n\t\t\tthis.error = 'Invalid Request';\n\t\t}\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Zvb3Rlci9mb290ZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit \n{\n title = 'User Management System';\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Login } from  './login';\nimport { Observable } from  'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n   constructor(private httpClient: HttpClient) {}\n   API_SERVER = \"http://10.30.8.231:3000/\";\n  login(login: Login) \n  {\n    return this.httpClient.post(`${this.API_SERVER}login`, login);\n  }\n  \n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { LoginService } from '../login.service';\n\nimport { Login } from  '../login';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    loading = false;\n\t loginForm : FormGroup\n\t submitted = false;\n    returnUrl: string;\n    error: string;\n    success: string\n  constructor(       private loginService: LoginService,  private formBuilder: FormBuilder,private router: Router,  private route: ActivatedRoute,) { }\n\n  ngOnInit() {\n\t  \n\t  this.loginForm  = this.formBuilder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n        });\n\t\t\n\t\t\n\t        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n\n        // show success message on registration\n        if (this.route.snapshot.queryParams['registered']) {\n            this.success = 'Registration successful';\n        }\n  }\nget f() { return this.loginForm.controls; }\n\nonSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.error = null;\n        this.success = null;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n\t\t  //console.log('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.loginForm.value));\n\t\t \n\t\t   this.loginService.login(this.loginForm.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t//console.log(\"data===\",data);\n\t\t\t\t\tif (data !== undefined)\n\t\t\t\t    {\n\t\t\t\t\t\tthis.router.navigate(['/dashboard'], { queryParams: { logged: 'true' }});\n\t\t\t\t    }\n\t\t\t\t\t  \n                },\n                error => {\n\t\t\t\t\t\t //console.log(\"error===\",error);\n\t\t\t\t\t\t  this.error = 'Something missing wrong. Please try again';\n\t\t\t\t\t\t  this.loading = false;\n                });\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n        /*this.authenticationService.login(this.f.email.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.error = error;\n                    this.loading = false;\n                });*/\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Registration } from  './registration';\nimport { Observable } from  'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n\t\n  // constructor() { }\n   \n   constructor(private httpClient: HttpClient) {}\n API_SERVER = \"http://10.30.8.231:3000/\";\n  register(registration: Registration) \n  {\n    return this.httpClient.post(`${this.API_SERVER}saveuser`, registration);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n// import custom validator to validate that password and confirm password fields match\nimport { MustMatch } from '../_helpers/must-match.validator';\n\nimport { RegistrationService } from '../registration.service';\n\nimport { Registration } from  '../registration';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\n\nexport class RegistrationComponent implements OnInit {\n\t  data: any = {};\n    registerForm: FormGroup;\n    submitted = false;\n\tloading = false;\n\terror: string;\n\t\n\n    constructor( private formBuilder: FormBuilder, \n\t         private registrationService: RegistrationService,\n\t\t\t private router: Router)\n\t\t\t {\n\t\t\t\t }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            confirmPassword: ['', Validators.required]\n        }, {\n            validator: MustMatch('password', 'confirmPassword')\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n\t\t// alert(JSON.stringify(this.data));\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) \n\t\t{\n            return;\n        }\n\t\t  this.loading = true;\n\t\t   this.registrationService.register(this.registerForm.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n     \n\t\t\t\t\t this.router.navigate(['/login'], { queryParams: { registered: true }});\n\t\t\t\t\t\n\t\t\t\t\t  \n                },\n                error => {\n\t\t\t\t\t\t console.log(\"error===\",error);\n\t\t\t\t\t\t  this.error = 'Something missing wrong. Please try again';\n\t\t\t\t\t\t  this.loading = false;\n                });\n\t\t\t/*this.registrationService.createUser(this.registerForm.value).subscribe((registration: Registration)=>{\n        console.log(\"User created, \", registration);\n      });\n\t  */\n        console.log('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.registerForm.value));\n    }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXJsaXN0L3VzZXJsaXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-userlist',\n  templateUrl: './userlist.component.html',\n  styleUrls: ['./userlist.component.css']\n})\nexport class UserlistComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}